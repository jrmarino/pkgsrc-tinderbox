$NetBSD$

--- ../FreeBSD/lib/Tinderbox/MakeCache.pm	2011-10-16 00:52:55.000000000 +0000
+++ lib/Tinderbox/MakeCache.pm
@@ -37,8 +37,9 @@ our @makeTargets = (
         'FETCH_DEPENDS',   'BUILD_DEPENDS',
         'LIB_DEPENDS',     'RUN_DEPENDS',
         'TEST_DEPENDS',    'MAINTAINER',
-        'COMMENT',         'PORTNAME',
-        'DISTFILES',
+        'COMMENT',         'PKGBASE',
+        'DISTFILES',       'BOOTSTRAP_DEPENDS',
+        'DEPENDS'
 );
 
 # Create a new cache object
@@ -48,6 +49,7 @@ sub new {
                 CACHE   => undef,
                 SEEN    => undef,
                 BASEDIR => shift,
+                OPTFILE => shift,
         }, $name;
 
         $self;
@@ -60,13 +62,17 @@ sub _execMake {
         my $self = shift;
         my $port = shift;
         my @ret;
-        my $tmp;
+        my $target;
+        my $tmp = '';
 
         return if ($self->{SEEN}->{$port} eq 1);
 
-        $tmp = '-V ' . join(' -V ', @makeTargets);
+        foreach $target (@makeTargets) {
+                $tmp .= "-V '\${" . $target . "}' ";		
+        }
         my $dir = $self->{BASEDIR} . '/' . $port;
-        @ret = split("\n", `cd $dir && make $tmp`);
+        my $customOptions = $self->_package_options ($dir);
+        @ret = split("\n", `cd $dir && bmake $customOptions $tmp`);
 
         foreach $tmp (@makeTargets) {
                 $self->{CACHE}->{$port}{$tmp} = shift @ret;
@@ -74,6 +80,28 @@ sub _execMake {
         $self->{SEEN}->{$port} = 1;
 }
 
+# Get option variable name and requested options
+sub _package_options {
+        my $self = shift;
+        my $dir  = shift;
+        unless (-e $self->{OPTFILE}) {
+                return "";
+        }
+        my @data = split("\n", 
+           `cd $dir && bmake -V '\${DISTNAME}' -V '\${PKG_OPTIONS_VAR}'`);
+        my $distname = $data[0];
+        my $optvar   = $data[1];
+        my $instruction = `grep $distname $self->{OPTFILE}`;
+        unless ($instruction) {
+                return "";
+        }
+        my @customSet = split(/:/, $instruction);
+        unless (scalar (@customSet) >= 3) {
+                return "";
+        }
+        return $optvar . '="' . $customSet[2] . '"';
+}
+
 # Internal function for returning a port variable
 sub _getVariable {
         my $self = shift;
@@ -90,16 +118,28 @@ sub _getList {
         my $port = shift;
         my $item = shift;
         my @deps;
+        my $found;
 
         $self->_execMake($port);
         foreach my $dep (split(/\s+/, $self->{CACHE}->{$port}{$item})) {
+                $dep =~ s/^\s+//;
+                $dep =~ s/\s+$//;
                 my ($d, $ddir) = split(/:/, $dep);
-                if (!defined($ddir) || $item eq 'DEPENDS') {
+                if (!defined($ddir)) {
                         $ddir = $d;
                 }
                 $ddir =~ s|^$self->{BASEDIR}/||;
+                $ddir =~ s|^\.\.\/\.\.\/||;
                 if ($ddir) {
-                        push @deps, $ddir;
+                        $found = 0;
+                        foreach my $storedep (@deps) {
+                                if ($storedep eq $ddir) {
+                                        $found = 1;
+                                }
+                        }
+                        if (!$found) {
+                                push @deps, $ddir;
+                        }
                 }
         }
         return @deps;
@@ -109,7 +149,7 @@ sub _getList {
 sub Name {
         my $self = shift;
         my $port = shift;
-        return $self->_getVariable($port, 'PORTNAME');
+        return $self->_getVariable($port, 'PKGBASE');
 }
 
 # Package name
@@ -133,6 +173,20 @@ sub Maintainer {
         return $self->_getVariable($port, 'MAINTAINER');
 }
 
+# Bootstrap dependencies
+sub BootstrapDepends {
+        my $self = shift;
+        my $port = shift;
+        return $self->_getList($port, 'BOOTSTRAP_DEPENDS');
+}
+
+# Buildlink3 dependencies
+sub Buildlink3Depends {
+        my $self = shift;
+        my $port = shift;
+        return $self->_getList($port, 'DEPENDS');
+}
+
 # Extract dependencies
 sub ExtractDepends {
         my $self = shift;
@@ -206,6 +260,28 @@ sub FetchDependsList {
         return grep { !$uniq{$_}++ } @deps;
 }
 
+sub BootstrapDependsList {
+        my $self = shift;
+        my $port = shift;
+
+        my @deps;
+        push(@deps, $self->BootstrapDepends($port));
+
+        my %uniq;
+        return grep { !$uniq{$_}++ } @deps;
+}
+
+sub Buildlink3DependsList {
+        my $self = shift;
+        my $port = shift;
+
+        my @deps;
+        push(@deps, $self->Buildlink3Depends($port));
+
+        my %uniq;
+        return grep { !$uniq{$_}++ } @deps;
+}
+
 sub ExtractDependsList {
         my $self = shift;
         my $port = shift;
@@ -250,6 +326,7 @@ sub BuildDependsList {
         push(@deps, $self->FetchDepends($port));
         push(@deps, $self->BuildDepends($port));
         push(@deps, $self->LibDepends($port));
+        push(@deps, $self->Buildlink3Depends($port));
 
         my %uniq;
         return grep { !$uniq{$_}++ } @deps;
@@ -263,6 +340,7 @@ sub RunDependsList {
         my @deps;
         push(@deps, $self->LibDepends($port));
         push(@deps, $self->RunDepends($port));
+        push(@deps, $self->Buildlink3Depends($port));
 
         my %uniq;
         return grep { !$uniq{$_}++ } @deps;
