$NetBSD$

--- ../FreeBSD/README	2011-10-16 00:52:55.000000000 +0000
+++ README
@@ -2,27 +2,25 @@ Tinderbox User Guide
 
    Tinderbox is a package building system for FreeBSD ports, based
    on official Portbuild scripts used on pointyhat building
-   cluster. Tinderbox was written by Joe Marcus Clarke.
+   cluster. Tinderbox was written by Joe Marcus Clarke, and has
+   been ported to DragonFly BSD by John Marino.
 
    You can define multiple jails (base system versions) and
    multiple portstrees. The combination of jail and portstree is
    called a build. A Tinderbox jail is not what is understood as a
-   jail in FreeBSD, it is in fact a given world in a chroot.
+   jail in FreeBSD and DragonFly, it is in fact a given world in a chroot.
    Tinderbox supports automatic tracking of dependencies and only
    rebuilds packages that changed since last run. Tinderbox has
    support for email notification of failed builds. Tinderbox also
    integrates well with ccache.
 
-   Tinderbox is designed to easily provide package sets of ports
+   Tinderbox is designed to easily provide package sets of packages
    you need, for platforms and architectures you need. Tinderbox
-   is also excellent tool for testing new ports and port upgrades,
+   is also excellent tool for testing new packages and package upgrades,
    especially for testing dependencies and packing lists. It's
-   also useful for testing ports on various releases of FreeBSD,
-   since you can run FreeBSD 7.X/8.X world as a jail on a FreeBSD
-   9.X host.
+   also useful for testing packages on various releases of DragonFly,
+   since you can run earlier releases as a jail on the DragonFly-current.
 
-   This README is available in plain text, PDF, split HTML or all
-   on one page.
      __________________________________________________________
 
    Table of Contents
@@ -42,8 +40,8 @@ Tinderbox User Guide
         8.3. Distfile Caching
         8.4. Using Ccache
         8.5. Customizing the Environment
-        8.6. Updating port properties
-        8.7. Configuring port OPTIONS
+        8.6. Updating package properties
+        8.7. Configuring package OPTIONS
         8.8. Using Hooks
         8.9. Creating Users
         8.10. Automating/Queuing Port Builds
@@ -74,32 +72,28 @@ Chapter 1. Obtaining Tinderbox
      * ports-mgmt/tinderbox-devel which tracks HEAD and might
        contain additional experimental patches not (yet) present
        in the CVS.
+
+   The pkgsrc/DragonFly version of Tinderbox repository is
+   located at https://github.com/jrmarino/pkgsrc-tinderbox
      __________________________________________________________
 
 Chapter 2. Requirements
 
-   Recent FreeBSD (development happens on 9-CURRENT only, but
-   Tinderbox is known to work on RELENG_7 and RELENG_8 too), Perl
-   5.8 or later (lang/perl5.8), and either MySQL 4.1 or later
-   (databases/mysql41-server) or PostgreSQL 7.4 or later
-   (databases/postgres74-server).
+   Recent DragonFly, Perl 5.8 or later (lang/perl5), and either 
+   MySQL 5.0 or later (databases/mysql51-server) or 
+   PostgreSQL 8.4 or later (databases/postgres84-server).
 
    If MySQL is used, the MySQL Perl module must also be installed
-   (databases/p5-DBD-mysql41). If PostgreSQL is used, the Pg Perl
-   module must also be installed (databases/p5-DBD-Pg).
-
-   Please note, however, that is is recommended that either MySQL
-   5.0 or PostgreSQL 8.1 (or later) be used. There are currently
-   no plans to make this a requirement, but it may happen in the
-   future.
+   (databases/p5-DBD-mysql). If PostgreSQL is used, the Pg Perl
+   module must also be installed (databases/p5-DBD-postgresql).
 
-   PHP 4.x is now EOL, so the web front-end (found in the webui/
-   subdirectory) requires PHP 5 (lang/php5),
+   The web front-end (found in the webui/ subdirectory) 
+   requires PHP 5 (lang/php5),
    PEAR::MDB2_Driver_mysql (databases/pear-MDB2_Driver_mysql) or
-   PEAR::MDB2_Driver_pgsql (databases/pear-MDB2_Driver_pgsql), PHP
-   Session (www/php5-session), and one of the PHP MySQL
-   (databases/php5-mysql) or PHP Pgsql (databases/php5-pgsql)
-   depending on your choice of backend database above.
+   PEAR::MDB2_Driver_pgsql (databases/pear-MDB2_Driver_pgsql),
+   and one of the PHP MySQL (databases/php-mysql) or 
+   PHP Pgsql (databases/php-pgsql) depending on your choice of 
+   backend database above.
 
    If you will be sending emails from Tinderbox (e.g. build
    failure or build completion emails) you must install net/p5-Net
@@ -184,68 +178,49 @@ rpcbind_enable="YES"
 nfs_server_enable="YES"
 nfs_reserved_port_only="YES"
    12. Create the required Jails using the tc command. A Jail is
-       nothing more than a version of FreeBSD. For example, to
-       create a Jail for FreeBSD 8.2-RELEASE:
-# cd ${pb}/scripts && ./tc createJail -j 8.2 -d "FreeBSD 8.2-RELEASE" \
-        -t RELENG_8_2_0_RELEASE -u CVSUP
+       nothing more than a version of DragonFly. For example, to
+       create a Jail for DragonFly 2.12-RELEASE:
+# cd ${pb}/scripts && ./tc createJail -j 2.12 -d "DragonFly 2.12-RELEASE" \
+        -t DragonFly_RELEASE_2_12 -u GIT
        or
-# cd ${pb}/scripts && ./tc createJail -j 8.2 -d "FreeBSD 8.2-RELEASE" \
-        -t 8.2-RELEASE -u LFTP -H ftp.freebsd.org
-       The first method will download source via cvsup and use
-       make world to compile a complete FreeBSD installation.
-       The second method will instead download binary release sets
-       (used on CDs) and install them, making the process much
+# cd ${pb}/scripts && ./tc createJail -j 2.12 -d "DragonFly 2.12-RELEASE" \
+        -t 2.12.1 -u LFTP -H ftp.dragonflybsd.org
+       The first method will download source via git and use
+       make world to compile a complete DragonFly installation.
+       The second method will instead download binary release CD ISOs
+       and install them, making the process much
        shorter. As the command suggests, the second method
        requires lftp (ftp/lftp) to be installed. You need to
-       specify what release (not the CVS tag, as opposed to the
+       specify what release (not the GIT branch name, as opposed to the
        first method) you want to download with the -t option. Also
        note that you need to provide an FTP server to download the
        sets from (with the -H option).
-       Note: all Jail names MUST begin with their FreeBSD major
+       Note: all Jail names MUST begin with their DragonFly major
        version number. That is, the following is an illegal jail
-       name: "FreeBSD-8.2".
+       name: "DragonFly-2.12".
        Hint: It is recommended that the Jail begin with the
-       FreeBSD major.minor version (i.e. "8.2-FreeBSD" instead of
-       just "8-FreeBSD") as this may prove useful when using
+       DragonFly major.minor version (i.e. "2.12-DragonFly" instead of
+       just "2-DragonFly") as this may prove useful when using
        things such as Hooks (Section 8.8).
    13. Create the required PortsTrees using the tc command. A
-       PortsTree is a set of ports you wish to build. A PortsTree
-       does not have to be a complete FreeBSD ports tree. However,
-       all ports within a tree must have all of their dependencies
+       PortsTree is a set of packages you wish to build. A PortsTree
+       does not have to be a complete DragonFly pkgsrc tree. However,
+       all packages within a tree must have all of their dependencies
        within the same tree.
        For example, to create a portstree that tracks the full
-       FreeBSD ports tree:
-# cd ${pb}/scripts && ./tc createPortsTree -p FreeBSD \
-        -d "FreeBSD ports tree" \
-        -w http://www.freebsd.org/cgi/cvsweb.cgi/ports/
+       DragonFly pkgsrc tree:
+# cd ${pb}/scripts && ./tc createPortsTree -p DragonFly \
+        -d "DragonFly pkgsrc tree" \
+        -w http://cvsweb.se.netbsd.org/cgi-bin/bsdweb.cgi/pkgsrc/
    14. Create the required Builds using the tc command. A Build is
        a combination of a Jail and a PortsTree. The build is the
        object in which packages are created. To create a build
-       that combines a 8.2 Jail with the FreeBSD ports tree:
-# cd ${pb}/scripts && ./tc createBuild -b 8.2-FreeBSD -j 8.2 \
-        -p FreeBSD -d "8.2-RELEASE with FreeBSD ports tree"
+       that combines a 2.12 Jail with the DragonFly pkgsrc tree:
+# cd ${pb}/scripts && ./tc createBuild -b 2.12-DragonFly -j 2.12 \
+        -p DragonFly -d "2.12-RELEASE with DragonFly pkgsrc tree"
        Note: the recommended way to name Builds is
        "Jail-PortsTree". All builds must also begin with their
-       FreeBSD major version number.
-
-   NOTE: The tc script uses cvsup12 as its default cvsup mirror.
-   If you would like to use another server or enable cvsup
-   compression use the -H and -C line arguments to the tc script
-   respectively. For example, to use cvsup2.freebsd.org and enable
-   cvsup compression for all Jail updates, use the following
-   command:
-# cd ${pb}/scripts && ./tc createJail -j 8-STABLE \
-        -d "FreeBSD 8-STABLE" -t RELENG_8 -u CVSUP -C \
-        -H cvsup2.freebsd.org
-
-   TIP: It is possible to suppress spurious setuid warnings from
-   periodic if ${pb} is on a dedicated partition. Simply add the
-   nosuid flag to the partition; for UFS in /etc/fstab:
-/dev/ad5s1f     /usr/local/tinderbox    ufs     rw,nosuid       1
-1
-
-   and for ZFS:
-# zfs set setuid=off $(zfs list ${pb} | tail -n 1 | cut -d ' ' -f 1)
+       DragonFly major version number.
      __________________________________________________________
 
 Chapter 4. Upgrading
@@ -266,8 +241,8 @@ Chapter 4. Upgrading
    first upgrade to the latest 2.4 release, then upgrade to 3.0.
 
    The 3.0 upgrade will migrate all data, configuration, and
-   scripts from 2.x EXCEPT any customized port fail reasons and
-   port fail patterns. These will have to be re-entered by hand
+   scripts from 2.x EXCEPT any customized package fail reasons and
+   package fail patterns. These will have to be re-entered by hand
    after completing the 3.0 upgrade.
 
    CAVEAT: If you are doing a major upgrade (i.e. moving from one
@@ -280,31 +255,30 @@ Chapter 4. Upgrading
 Chapter 5. Using Tinderbox
 
    To run a Tinderbox build, and track the progress in the
-   database, you must first add the port you wish to build to the
+   database, you must first add the package you wish to build to the
    database using the ${pb}/scripts/tc application:
 # cd ${pb}/scripts && ./tc addPort -b {BUILD} -d {PORT DIRECTORY}
 
-   Where {BUILD} is the name of the Build for which this port
+   Where {BUILD} is the name of the Build for which this package
    should be built and {PORT DIRECTORY} is the directory within
-   the PortsTree where this port can be found. For example, to
-   build the GNOME 2 Desktop port for the Build "8.2-FreeBSD":
-# cd ${pb}/scripts && ./tc addPort -b 8.2-FreeBSD -d x11/gnome2
+   the PortsTree where this package can be found. For example, to
+   build the Joe editor package for the Build "2.12-DragonFly":
+# cd ${pb}/scripts && ./tc addPort -b 2.12-DragonFly -d editors/joe
 
-   Note: a port does not have to be added to the database for
+   Note: a package does not have to be added to the database for
    Tinderbox to build it. If you just want to do a quick ad hoc
-   port build, forgo the previously mentioned step.
+   package build, forgo the previously mentioned step.
 
    Note: in Tinderbox 2.x, addPort took a -r argument which
-   resursively added ports to the datastore. In Tinderbox 3.0 and
+   resursively added packages to the datastore. In Tinderbox 3.0 and
    higher, this option is assumed. If you do not want to enable
    recursion, specify the -R argument to addPort.
 
    To start a Tinderbox build, use the tc command:
 # cd ${pb}/scripts && ./tc tinderbuild -b {BUILD} {PORT DIRECTORY}
 
-   For example, to build the GNOME 2 Desktop for the Build
-   8.2-FreeBSD:
-# cd ${pb}/scripts && ./tc tinderbuild -b 8.2-FreeBSD x11/gnome2
+   For example, to build the Joe editor for the Build 2.12-DragonFly:
+# cd ${pb}/scripts && ./tc tinderbuild -b 2.12-DragonFly editors/joe
 
    TIP: The example above will run the build in the foreground
    with all messages and errors echoing to the terminal. To
@@ -312,23 +286,23 @@ Chapter 5. Using Tinderbox
    output to a log file. For example:
 
      * Bourne shell equivalents:
-# cd ${pb}/scripts && ./tc tinderbuild -b 8.2-FreeBSD \
-        x11/gnome2 > ${pb}/builds/8.2-FreeBSD/build.log 2>&1 &
+# cd ${pb}/scripts && ./tc tinderbuild -b 2.12-DragonFly \
+        editors/joe > ${pb}/builds/2.12-DragonFly/build.log 2>&1 &
      * C shell equivalents:
-# cd ${pb}/scripts && ./tc tinderbuild -b 8.2-FreeBSD \
-        x11/gnome2 >& ${pb}/builds/8.2-FreeBSD/build.log &
+# cd ${pb}/scripts && ./tc tinderbuild -b 2.12-DragonFly \
+        editors/joe >& ${pb}/builds/2.12-DragonFly/build.log &
 
    More advanced logging options are also available. All log files
-   including tinderbuild output, make logs, and individual port
+   including tinderbuild output, make logs, and individual package
    build logs can be captured in one location. This location is
    specified by the LOG_DIRECTORY configuration option. By
    default, this option is unset meaning that logs will not be
    centralized. If set to a directory, a subdirectory will be
    created in the format of {BUILD}-{DATE} where {BUILD} is the
    Build name, and {DATE} is the date in the format YYYYMMDDHHMMSS
-   (e.g. 8.2-FreeBSD-20091012112105). Within this subdirectory
+   (e.g. 2.12-DragonFly-20091012112105). Within this subdirectory
    will be the tinderbuild log, and symlinks to the make logs and
-   individual port build logs. If you would rather have the log
+   individual package build logs. If you would rather have the log
    files copied to this location (instead of using symlinks), set
    the LOG_DOCOPY configuration option to "1".
 
@@ -358,7 +332,7 @@ Chapter 5. Using Tinderbox
                   this option if a good Makefile already exists)
   -noduds         skips the duds file generation stage (NOTE: packages
                   which are forbidden or ignored will be built)
-  -noclean        does not clean up the Build hierarchy after the port
+  -noclean        does not clean up the Build hierarchy after the package
                   build completes
   -plistcheck     makes any plist verification problems (e.g.
                   leftover files) fatal
@@ -394,16 +368,16 @@ Chapter 6. Maintenance
    To update existing PortsTrees, use the tc (Tinderbox
    Controller) application with the updatePortsTree command. For
    example:
-# cd ${pb}/scripts && ./tc updatePortsTree -p FreeBSD
+# cd ${pb}/scripts && ./tc updatePortsTree -p DragonFly
 
    If you want to clone various aspects of an existing Build, use
    the tc application with the copyBuild command. For example:
-# cd ${pb}/scripts && ./tc copyBuild -s 8.2-FreeBSD -d 9-FreeBSD
+# cd ${pb}/scripts && ./tc copyBuild -s 2.12-DragonFly -d 2.13-DragonFly
 
-   The source and destination Builds (i.e. 8.2-FreeBSD and
-   9-FreeBSD respectively in this example) must already exist. By
+   The source and destination Builds (i.e. 2.12-DragonFly and
+   2.13-DragonFly respectively in this example) must already exist. By
    default, copyBuild will copy the environment file, OPTIONS, and
-   ports from the source Build to the destination Build. It can
+   packages from the source Build to the destination Build. It can
    also optionally copy ccache data and packages. The options
    supported by copyBuild are in Table 6-1.
 
@@ -413,7 +387,7 @@ Chapter 6. Maintenance
    -c (optional) copy ccache data
    -E (optional) do NOT copy environment files
    -O (optional) do NOT copy OPTIONS data
-   -P (optional) do NOT copy ports
+   -P (optional) do NOT copy packages
    -p (optional) copy packages (including last build status,
       version, and size)
 
@@ -441,7 +415,7 @@ Chapter 6. Maintenance
 
    Table 6-2. tbcleanup Options
    -d Cleanup unreferenced distfiles from the distfile cache
-   -E Do NOT remove old error logs (regular port build logs are
+   -E Do NOT remove old error logs (regular package build logs are
       still removed)
    -p Cleanup stale packages
 
@@ -468,32 +442,32 @@ Chapter 7. Troubleshooting
    found under ${pb}/builds/{BUILD} (where {BUILD} is the Build
    name). This is where tinderbuild output should be redirected
    (see Chapter 5. The make.0 and make.1 logs contain the initial
-   buildsetup for each port. The reason there are two logs is that
+   buildsetup for each package. The reason there are two logs is that
    tinderbuild runs in two phases. The second build phase is
    identical to the first, and is run to catch any transient
    problems that may have occurred in the first phase.
 
-   The full build log of each port will be copied to
+   The full build log of each package will be copied to
    ${pb}/logs/{BUILD} (where {BUILD} is the Build name). If the
-   port failed to build successfully, the log will also be copied
+   package failed to build successfully, the log will also be copied
    to ${pb}/errors/{BUILD} (where {BUILD} is the Build name).
 
    Sometimes, the log alone is not sufficient for figuring out why
-   a port failed to build. In such cases, one must also see the
-   port's work directory. To have Tinderbox save this, create an
-   empty file called .keep in the port's directory, and the work
+   a package failed to build. In such cases, one must also see the
+   package's work directory. To have Tinderbox save this, create an
+   empty file called .keep in the package's directory, and the work
    directory will be tarred, compressed, and copied to
    ${pb}/wrkdirs/{BUILD} (where {BUILD} is the Build name).
 
    When it becomes too difficult to figure out the problem based
    on the wrkdir, it may become necessary to access the Build
-   itself. To do this, touch a file called .sleepme in the port's
+   itself. To do this, touch a file called .sleepme in the package's
    directory. The moment the .sleepme file is detected by the
-   build system, the port build will suspend just before executing
+   build system, the package build will suspend just before executing
    "make build". You can access the Build with the command:
 # ./tc enterBuild -b {BUILD} -d {PORT_DIRECTORY}
 
-   When you have finished, remove the .sleepme file, and the port
+   When you have finished, remove the .sleepme file, and the package
    build will continue.
      __________________________________________________________
 
@@ -501,29 +475,27 @@ Chapter 8. Advanced Topics
 
 8.1. Alternative Means of Creating Jail Sources and PortsTrees
 
-   By default, Jails and PortsTrees are updated using csup
-   (/usr/bin/csup). Every time a new Jail or PortsTree is created,
-   they will inherit the default update type. This update type is
-   stored in ${pb}/scripts/etc/env/GLOBAL as defaultUpdateType.
-   The allowed values are CVSUP, CSUP, LFTP, USER, and NONE. For
-   CVSUP and CSUP there is also a defaultUpdateHost. This can also
+   By default, PortsTrees are updated using csup (/usr/pkg/bin/csup)
+   and Jails are updated by LFTP or GIT. Every time a new Jail or 
+   PortsTree is created, they will inherit the default update type. 
+   This update type is stored in ${pb}/scripts/etc/env/GLOBAL as 
+   defaultUpdateType. The allowed values are GIT, CSUP, LFTP, USER, 
+   and NONE. For CSUP there is also a defaultUpdateHost. This can also
    be changed in ${pb}/scripts/etc/env/GLOBAL.
 
    A Jail or PortsTree's update type can also be set when creating
    the Jail or PortsTree. To do this, specify the -u option to the
-   appropriate create command. If the value of the update type is
-   CVSUP, then /usr/local/bin/cvsup will be used to update the
-   Jail or PortsTree. If the value is NONE, then no updates can be
+   appropriate create command. If the value is NONE, then no updates can be
    performed once the Jail or PortsTree is created. Instead, it is
    assumed these trees already exist in the appropriate format.
 
    If the value is USER, then an update.sh script must be created
    under the Jail or PortsTree's root directory. This script will
    be called when an update is required. For example, if you have
-   a Jail called "8.2", an executable update.sh script must be
-   placed under ${pb}/jails/8.2. If you have a PortsTree called
-   "FreeBSD", an executable update.sh script must be placed under
-   ${pb}/portstrees/FreeBSD.
+   a Jail called "2.12", an executable update.sh script must be
+   placed under ${pb}/jails/2.12. If you have a PortsTree called
+   "DragonFly", an executable update.sh script must be placed under
+   ${pb}/portstrees/DragonFly.
      __________________________________________________________
 
 8.2. Alternative Mounting
@@ -533,12 +505,12 @@ Chapter 8. Advanced Topics
    -m switch to create.
 
    Examples for NFS:
-# ./tc createPortsTree -p FreeBSD -m server:/directory
-# ./tc createJail -j 8-FreeBSD -m server:/directory
+# ./tc createPortsTree -p DragonFly -m server:/directory
+# ./tc createJail -j 2-DragonFly -m server:/directory
 
    Examples for nullfs:
-# ./tc createPortsTree -p FreeBSD -m /directory
-# ./tc createJail -j 8-FreeBSD -m /directory
+# ./tc createPortsTree -p DragonFly -m /directory
+# ./tc createJail -j 2-DragonFly -m /directory
 
    Tinderbuild will ensure that these file systems are correctly
    mounted so you do not need to mount them by your own before
@@ -552,7 +524,7 @@ Chapter 8. Advanced Topics
 8.3. Distfile Caching
 
    Caching distfiles in a local repository can greatly improve
-   build times, and in cases where downloading a particular port
+   build times, and in cases where downloading a particular package
    is only necessary for a new build, can reduce bandwidth. As
    long as there is sufficient disk space, enabling a local
    distfile cache can be accomplished by one of the following
@@ -613,36 +585,36 @@ PERL_VER=5.6.2
 PERL_VERSION=5.6.2
 
    Likewise, if you want to enable debugging for a particular
-   PortsTree (e.g. "FreeBSD-debug"), create the following
-   portstree.FreeBSD-debug in ${pb}/scripts/etc/env/:
+   PortsTree (e.g. "DragonFly-debug"), create the following
+   portstree.DragonFly-debug in ${pb}/scripts/etc/env/:
 CFLAGS="-O -g -pipe"
 STRIP=
      __________________________________________________________
 
-8.6. Updating port properties
+8.6. Updating package properties
 
    Every time "./tc addPort" is called, it will determine if a
-   port is already present in the datastore. If it is, the port's
+   port is already present in the datastore. If it is, the package's
    properties (i.e. MAINTAINER, COMMENT, etc.) are updated. If you
-   just want rescan all of the ports currently in the datastore,
+   just want rescan all of the packages currently in the datastore,
    and update their properties, use the command "./tc
    rescanPorts". It accepts many of the same options as addPort.
      __________________________________________________________
 
-8.7. Configuring port OPTIONS
+8.7. Configuring package OPTIONS
 
-   It is possible to manipulate port OPTIONS on a per-Build basis.
+   It is possible to manipulate package OPTIONS on a per-Build basis.
    To do this, create a directory under which all build OPTIONS
    sub-directories will go (e.g. ${pb}/options/). For each Build
    that you wish to use to use OPTIONS, create a subdirectory
-   named for that build (e.g. 8-STABLE-FreeBSD/). This directory
-   should look like /var/db/ports/ in that it contains
-   sub-directories for each OPTIONS-supporting port.
+   named for that build (e.g. 2.12-DragonFly/). This directory
+   should look like /var/db/pkg/ in that it contains
+   sub-directories for each OPTIONS-supporting package.
 
    For example, if you wanted to build net/wireshark with RTP
-   support for the Build 8-STABLE-FreeBSD, you would have the
+   support for the Build 2.12-DragonFly, you would have the
    following directory structure:
-${pb}/options/8-STABLE-FreeBSD/wireshark/options
+${pb}/options/2.12-DragonFly/wireshark/options
 
    The contents of the wireshark/options file would be:
 _OPTIONS_READ=wireshark-0.99.4
@@ -666,8 +638,8 @@ WITH_PCRE=true
    -o set an OPTIONS source directory tree
 
    If you would like to interactively choose OPTIONS for your
-   ports, specify the -o option to "./tc addPort". This will
-   perform a make config on all ports, displaying the ncurses
+   packages, specify the -o option to "./tc addPort". This will
+   perform a make config on all packages, displaying the ncurses
    OPTIONS dialog. All OPTIONS settings will be automatically
    saved to the correct location. Each time addPort or rescanPorts
    is run with the -o flag, all existing OPTIONS settings will be
@@ -738,12 +710,12 @@ WITH_PCRE=true
 
 8.10. Automating/Queuing Port Builds
 
-   If you want to use Tinderbox to test many different ports one
+   If you want to use Tinderbox to test many different packages one
    after the other you probably want tinderd. tinderd runs as a
-   daemon and looks to see if something was added to the "ports to
-   build queue". You can add different ports for different builds
+   daemon and looks to see if something was added to the "packages to
+   build queue". You can add different packages for different builds
    with different priorities. tinderd will automatically pick up
-   the port with the highest priority and starts building it. That
+   the package with the highest priority and starts building it. That
    repeats until the queue is empty. After the queue empties
    tinderd will sleep for a configurable amount of time (default:
    120 seconds) thereafter it starts searching for new queue
@@ -759,7 +731,7 @@ WITH_PCRE=true
    copy the included ${pb}/etc/rc.d/tinderd script to
    /usr/local/etc/rc.d/. Be sure to check out the various rc.conf
    variables documented in this script before using it. If you
-   installed Tinderbox using the port then the script will have
+   installed Tinderbox using the package then the script will have
    been installed for you as tinderbox.
 
    NOTE: the script used to be called tinderd.sh. If you have a
@@ -770,7 +742,7 @@ WITH_PCRE=true
 # cd ${pb}/scripts && ./tc addBuildPortsQueueEntry -b {BUILD} \
         -d {PORT DIRECTORY}
 
-   To add a port to the queue for tinderd to automatically pick
+   To add a package to the queue for tinderd to automatically pick
    up, run a tinderbuild on it, and delete the entry after
    tinderbuild completion.
 
@@ -778,19 +750,19 @@ WITH_PCRE=true
    directory under {BUILDS}'s PortsTree (e.g. x11/gnome2).)
 
    If the addBuildPortsQueueEntry command is run without the -d
-   argument, then all ports for the specified {BUILD} will be
+   argument, then all parkages for the specified {BUILD} will be
    added to the queue.
      __________________________________________________________
 
 8.11. Running Tinderbox in a Jail
 
-   Tinderbox can be run in a FreeBSD jail with some concessions.
+   Tinderbox can be run in a DragonFly jail with some concessions.
 
    Since neither NFS nor nullfs (at the time of writing) are
    usable in a jail, we cannot simply install and use as normal.
    Instead, we simply use a chroot.
     1. Create a jail for your Tinderbox using the instructions in
-       the FreeBSD Handbook.
+       the DragonFly Handbook.
     2. Install dependencies into the jail (Chapter 2).
     3. Install Tinderbox (in the jail):
 # mkdir ${pb}
