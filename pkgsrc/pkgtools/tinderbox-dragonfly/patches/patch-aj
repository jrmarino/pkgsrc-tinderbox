$NetBSD$

--- ../FreeBSD/lib/buildscript	2011-10-16 00:52:55.000000000 +0000
+++ lib/buildscript
@@ -1,6 +1,6 @@
 #!/bin/sh
 
-# usage: $0 DIRNAME PHASE ED PD FD BD RD TD [PLISTCHECK]
+# usage: $0 DIRNAME PHASE ED PD FD BD RD TD SD [PLISTCHECK]
 #   PHASE is 1 (checksum) or 2 (package)
 
 cleanup() {
@@ -8,7 +8,7 @@ cleanup() {
 
   if [ -e ${dir}/.keep ]; then
     cd ${dir}
-    objdir=$(make -V WRKDIR)
+    objdir=`bmake -V '\${WRKDIR}'`
     tar cfjC /tmp/work.tbz ${objdir}/.. work
   fi
 
@@ -36,7 +36,6 @@ add_pkg() {
     for i in $pkgs; do
       echo "pkg_add $i"
       base=$(basename $i .tgz)
-      base=$(basename $base .tbz)
       if pkg_info -q -e $base; then
         echo "skipping $base, already added"
       else
@@ -48,6 +47,8 @@ add_pkg() {
       fi
     done
   fi
+  # pkgsrc requires PKG_PATH variable be unset
+  unset PKG_PATH
 }
 
 del_pkg() {
@@ -91,6 +92,37 @@ del_pkg() {
     done
   fi
   find /var/db/pkg -type f -empty -delete
+  # pkgsrc requires PKG_PATH variable be unset
+  unset PKG_PATH
+}
+
+get_package_options() {
+    # If the option file exists, it's stored in PKG_OPTIONS_FILE env var.
+    # The format is ${DISTNAME}:jobs override:options list
+    # example: gcc-4.6.1::-gcc-fortran
+    #          In this example, there is no makejob override, fortran removed
+    # example: gawk-3.1.8:1:portals
+    #          In the above example, MAKE_JOBS=1, portals option added
+    # Don't include any "nbX" suffixes, that is ${PKGNAME}.
+    # Use the "DISTNAME" definition in the makefile.
+
+    INFO_DISTNAME=$1
+    MAKEJOBS_OVERRIDE=
+    SPECIFIC_OPTIONS=
+    if [ -z "${PKG_OPTIONS_FILE}" ]; then
+	return
+    fi
+
+    instructions=`grep ${INFO_DISTNAME}: ${PKG_OPTIONS_FILE}`
+    if [ -z "${instructions}" ]; then
+	return
+    fi
+
+    test_override=`echo ${instructions} | awk 'BEGIN {FS=":"}; /^.+:[0-9]+:/ {print $2}'`
+    if [ -n "{test_override}" ]; then
+	MAKEJOBS_OVERRIDE="${test_override}"
+    fi
+    SPECIFIC_OPTIONS="`echo ${instructions} | awk 'BEGIN {FS=":"}; /^.+:[0-9]*:/ {print $3}'`"
 }
 
 dir=$1
@@ -102,37 +134,46 @@ FD=$5
 BD=$6
 RD=$7
 TD=$8
-PLISTCHECK=$9
+SD=$9
+PLISTCHECK=${10}
 
 L=$(echo ${LOCALBASE} | sed 's,^/,,')
 
+export NO_PKGTOOLS_REQD_CHECK=1
+export WRKOBJDIR=/work
+
+cd $dir || exit 1
+
+pkgname=`bmake -V '\${PKGNAME}'`
+INFO_OPTVAR=`bmake -V '\${PKG_OPTIONS_VAR}'`
+get_package_options `bmake -V '\${DISTNAME}'`
+
 if [ $phase = 1 ]; then
 
-  cd $dir || exit 1
+  INFO_MAINTAINER=`bmake -V '\${MAINTAINER}'`
+  INFO_PREFIX=`bmake -V '\${PREFIX}'`
   echo "build started at $(date)"
   echo "port directory: ${dir}"
   echo "building for:  $(uname -rm)"
-  echo "maintained by: $(make maintainer)"
-  echo "Makefile ident: $(ident ${dir}/Makefile | grep 'FreeBSD:' | sed 's/^[ \t]*//')"
-  echo "prefixes: LOCALBASE=${L} PREFIX=$(make -V PREFIX)"
+  echo "maintained by: ${INFO_MAINTAINER}"
+  echo "Makefile ident: $(ident ${dir}/Makefile | grep 'NetBSD:' | sed 's/^[ \t]*//')"
+  echo "prefixes: LOCALBASE=${L} PREFIX=${INFO_PREFIX}"
   echo "Begin Configuration:"
   echo "---Begin Environment---"
-  printenv
+  printenv | sort
   echo "---End Environment---"
   echo ""
   echo "---Begin OPTIONS List---"
-  make showconfig
+  if [ -n "${INFO_OPTVAR}" -a -n "${SPECIFIC_OPTIONS}" ]; then
+      bmake show-options ${INFO_OPTVAR}="${SPECIFIC_OPTIONS}"
+  else
+      bmake show-options
+  fi
   echo "---End OPTIONS List---"
   echo ""
-  optionsfile=$(make -V OPTIONSFILE)
-  if [ -f "${optionsfile}" ]; then
-      echo "---Begin OPTIONS configuration---"
-      cat ${optionsfile}
-      echo "---End OPTIONS configuration---"
-      echo ""
-  fi
   echo "End Configuration."
 
+  echo "BOOTSTRAP_DEPENDS=${SD}"
   echo "FETCH_DEPENDS=${FD}"
   echo "PATCH_DEPENDS=${PD}"
   echo "EXTRACT_DEPENDS=${ED}"
@@ -165,19 +206,20 @@ if [ $phase = 1 ]; then
 ./${L}/share/xml
 ./${L}/etc/gconf
 ./var/db/fontconfig
+./distcache
 EOF
 
   # Record a "pristine" mtree.
   mtree -X /tmp/mtree.preexclude -xcn -k uid,gid,mode -p / > /tmp/mtree.pristine
 
-  add_pkg $FD
+  add_pkg $SD $FD
 
   cd $dir || exit 1
-  pkgname=$(make package-name)
+
   echo "================================================================"
   echo "====================<phase 1: make checksum>===================="
 
-  if /pnohang $TIMEOUT /tmp/make.log1 ${pkgname} make checksum; then
+  if /pnohang $TIMEOUT /tmp/make.log1 ${pkgname} bmake checksum; then
     cat /tmp/make.log1
     echo "0" > /tmp/status
   else
@@ -186,15 +228,27 @@ EOF
 
 else
 
-  cd $dir || exit 1
-  pkgname=$(make package-name)
-
   echo "================================================================"
   echo "====================<phase 2: make extract>===================="
 
   add_pkg ${ED}
+  
+  # For an unfathomable reason, pkgsrc insists on bringing in build
+  # dependencies in order to extract the files.  Not only is this
+  # annoying if you want to check the contents of the tarball and you
+  # have to build all the dependencies first, it means this script
+  # has to be reordered where build dependencies come in very early.
+  
+  add_pkg ${BD}
+
   cd $dir
-  /pnohang $TIMEOUT /tmp/make.log2 ${pkgname} make extract || cleanup 2
+  # The config options need to come here because make extract pulls in 
+  # make configure first, which is where this input is needed.
+  if [ -n "${INFO_OPTVAR}" -a -n "${SPECIFIC_OPTIONS}" ]; then
+      /pnohang $TIMEOUT /tmp/make.log2 ${pkgname} bmake extract ${INFO_OPTVAR}="${SPECIFIC_OPTIONS}" || cleanup 2
+  else
+      /pnohang $TIMEOUT /tmp/make.log2 ${pkgname} bmake extract || cleanup 2
+  fi
   cat /tmp/make.log2
   del_pkg ${ED}
 
@@ -207,15 +261,13 @@ else
   echo "====================<phase 3: make patch>===================="
   add_pkg ${PD}
   cd $dir
-  /pnohang $TIMEOUT /tmp/make.log3 ${pkgname} make patch || cleanup 3
+  /pnohang $TIMEOUT /tmp/make.log3 ${pkgname} bmake patch || cleanup 3
   cat /tmp/make.log3
   del_pkg ${PD}
 
   echo "================================================================"
   echo "====================<phase 4: make build>===================="
 
-  add_pkg ${BD}
-
   # Files we do not care about changing between pre-build and post-cleanup
   cat > /tmp/mtree.buildexclude <<EOF
 ./var/log/*
@@ -247,7 +299,7 @@ EOF
   fi
 
   cd $dir
-  portdir=$(echo ${dir} | sed -e 's|^/usr/ports/||' -e 'y/\//_/')
+  portdir=$(echo ${dir} | sed -e 's|^/usr/pkg/||' -e 'y/\//_/')
 
   if [ -f .sleepme ]; then
       set > /tmp/.set_${portdir}
@@ -259,32 +311,32 @@ EOF
       rm -f /tmp/.set_${portdir}
   fi
 
-  /pnohang $TIMEOUT /tmp/make.log4 ${pkgname} make build || cleanup 4
+  # MAKE_JOBS normally defined in $LOCALBASE/etc/mk.conf, but it's
+  # inside the tarball.  By default it's not set, so we override it here.
+  # We can use the options file to specify exactly the number of jobs we want
+
+  if [ -n "${MAKEJOBS_OVERRIDE}" ]; then
+	echo "=> Number jobs set to ${MAKEJOBS_OVERRIDE} in options file"
+	PORT_JOBS="MAKE_JOBS=${MAKEJOBS_OVERRIDE}"
+  else
+	ncpus=$(/sbin/sysctl hw.ncpu | awk '{print $2}')
+	if [ "${npcus}" = "1" ]; then
+		echo "=> Single job, only 1 CPU"
+		PORT_JOBS="MAKE_JOBS=1"
+	else
+		factor=$(echo "$ncpus*2+1" | /usr/bin/bc)
+		echo "=> Multiple CPUs: ${factor} jobs set"
+		PORT_JOBS="MAKE_JOBS=${factor}"
+	fi
+  fi
+
+  /pnohang $TIMEOUT /tmp/make.log4 ${pkgname} bmake build ${PORT_JOBS} || cleanup 4
   cat /tmp/make.log4
 
   echo "================================================================"
   echo "====================<phase 5: make test>===================="
 
-  pkg_info | awk '{print $1}' | sort > /tmp/pkgs_pre_test
-  add_pkg ${TD}
-  pkg_info | awk '{print $1}' | sort > /tmp/pkgs_post_test      
-  cd $dir
-  /pnohang $TIMEOUT /tmp/make.log5 ${pkgname} make -k regression-test
-  cat /tmp/make.log5
-
-  RTD=`comm -3 /tmp/pkgs_pre_test /tmp/pkgs_post_test | tr -d '\t'`
-  del_pkg ${RTD}
-  rm /tmp/pkgs_pre_test /tmp/pkgs_post_test
-
-  mtree -X /tmp/mtree.buildexclude -x -f /tmp/mtree.prebuild -p / | egrep -v "^(${L}/var|${L}/lib/X11/xserver/SecurityPolicy|${L}/share/nls/POSIX|${L}/share/nls/en_US.US-ASCII|etc/services|compat |${L} |etc/manpath.config|etc/.*.bak|${L}/info/dir|${L}/lib/X11/fonts/.*/fonts\.|${L}/man/..( |/man. )|${L}/lib/X11/fonts/TrueType|${L}/etc/gconf/gconf.xml.defaults/%gconf-tree.*.xml|usr/X11R6 )" > /tmp/list.preinstall
-
-  if [ -s /tmp/list.preinstall ]; then
-      echo "================================================================"
-      echo "Fatal error: filesystem was touched prior to 'make install' phase"
-      cat /tmp/list.preinstall
-      echo "================================================================"
-      cleanup 0
-  fi
+  echo "Pkgsrc does not have per-package regression test capability, skipped."
 
   echo "================================================================"
   echo "====================<phase 6: make install>===================="
@@ -306,7 +358,7 @@ EOF
   mtree -X /tmp/mtree.exclude -xcn -k uid,gid,mode -p / > /tmp/mtree
 
   cd $dir
-  if /pnohang $TIMEOUT /tmp/make.log6 ${pkgname} make install; then
+  if /pnohang $TIMEOUT /tmp/make.log6 ${pkgname} bmake install; then
     cat /tmp/make.log6
     echo "0" > /tmp/status
   else
@@ -316,14 +368,14 @@ EOF
   echo "================================================================"
   echo "====================<phase 7: make package>===================="
   cd $dir
-  if /pnohang $TIMEOUT /tmp/make.log7 ${pkgname} make package; then
+  if /pnohang $TIMEOUT /tmp/make.log7 ${pkgname} bmake package; then
       echo "0" > /tmp/status
   else
       echo "1" > /tmp/status
   fi
 
   cat /tmp/make.log7
-  prefix=$(make -V PREFIX)
+  prefix=`bmake -V '\${PREFIX}'`
   du -skx / | awk '{print $1}' > /tmp/size
   del_pkg ${pkgname}
 
@@ -349,8 +401,10 @@ EOF
       echo "================================================================"
   fi
 
-
   echo
+  echo "=== Deleting /var/db/pkg/pkgdb.byfile.db"
+  rm -f /var/db/pkg/pkgdb.byfile.db
+
   echo "=== Checking filesystem state"
 
   if [ -s /tmp/list4 ]; then
@@ -374,8 +428,8 @@ EOF
 
   # BUILD_DEPENDS need to be present at install-time, e.g. gmake
   # Concatenate and remove duplicates
-  BRD=$(echo $BD $RD | tr ' ' '\n' | sort -u | tr '\n' ' ')
-  del_pkg ${BRD}
+  BRSD=$(echo $BD $RD $SD | tr ' ' '\n' | sort -u | tr '\n' ' ')
+  del_pkg ${BRSD}
   cd /var/db/pkg
   if [ $(echo $(echo * | wc -c)) != 2 ]; then
     echo "leftover packages:" *
@@ -430,7 +484,7 @@ EOF
 
   if [ -e ${dir}/.keep ]; then
     cd ${dir}
-    objdir=$(make -V WRKDIR)
+    objdir=`bmake -V '\${WRKDIR}'`
     tar cfjC /tmp/work.tbz ${objdir}/.. work
   fi
 
